#! /usr/bin/env node

var logging = require('./lib/logging')
  , snapdb = require('./lib/snapdb')
  , snapcsv = require('./lib/snapcsv')
  ;

var log
  , logLevel
  , db
  , mongodbUri
  ;

// 1st arg is mongo database connection url
mongodbUri = process.argv[2];
if (!mongodbUri) {
  printUsageAndExit();
}

// 2nd optional arg is for log level (0-5)
logLevel = parseInt(process.argv[3]) || 0;


// ==================================================================
// Connect to database
// ==================================================================

// on successful connection to database, start listening for requests
try {
  snapdb.connect(mongodbUri, function (err, client) {
    if (err) {
      console.error('Database connection failed, exiting now: ' + err);
      process.exit(1);
    } else {
      console.log('Connected. Starting import...');
      db = client;
      log = logging.logger(db, logLevel);

      importData(function(err, harvestStatus) {
        if (err) {
          printErrorAndExit(err);
        } else {
          process.exit();
        }
      });
    }
  });
} catch (err) {
  printErrorAndExit(err);
}

function importData(callback) {
  var storeCollection = snapdb.createStoreCollectionName()
    , importer = snapcsv.importer()
    , harvestStatus = {
          status: 'started'
        , storeCollection: storeCollection
        , importCount: 0
        , processedCount: 0
        , savedCount: 0
        , errorCount: 0
      }
    ;

  logHarvestStatus(harvestStatus, 'importing to collection' + storeCollection);

  importer.on('error', function (error) {
    harvestStatus.status = 'error';
    harvestStatus.error = error;
    logHarvestStatus(harvestStatus, 'error while reading SNAP data');
    callback(error);
    return;
  });

  importer.on('end', function (result) {
    harvestStatus.importCount = result.count;
    // we're not done, however - need to wait for all pending saves to complete
  });

  importer.on('data', function (store, index) {
    ++harvestStatus.processedCount;
    store.serialid = harvestStatus.processedCount;
    // console.log('saving store %d', store.serialid);

    // if (harvestStatus.processedCount > 500) return;

    snapdb.saveStore(storeCollection, store, function (err, result) {
      if (err) {
        harvestStatus.status = 'error';
        harvestStatus.error = err;
        harvestStatus.errorCount++;
        harvestStatus.errorStore_serialid = store.serialid;
        logHarvestStatus(harvestStatus, 'error saving store: ' + store.serialid);
      } else {
        harvestStatus.savedCount++;
        // console.log('saved store %d', store.serialid);
      }

      var step = 1000;
      var processed = harvestStatus.savedCount + harvestStatus.errorCount;
        if (processed % step == 0) {
          console.log('importing...%d', Math.floor(processed / step) * step);
        }

      // if (processed == 500) {
      if (processed == harvestStatus.importCount) {
        harvestStatus.status = 'success';
        logHarvestStatus(harvestStatus, 
          'Processed ' + processed + 
          ' stores. Errors: ' + harvestStatus.errorCount);

        snapdb.updateCurrentStoreCollection(storeCollection, function(err, result) {
          if (err) {
            harvestStatus.error = err;
            logHarvestStatus(harvestStatus, 'unable to set current store collection for: ' + storeCollection);
            callback(err);
            return;
          }

          logHarvestStatus(harvestStatus, 'updated current store collection: ' + storeCollection);
          callback(null, harvestStatus);
          return;
        });
      }
    });
  });

  importer.import();
}

function logHarvestStatus(harvestStatus, message) {
  harvestStatus = harvestStatus || {};
  harvestStatus.timestamp = Date();
  harvestStatus.status = harvestStatus.status || null;
  harvestStatus.error = harvestStatus.error || null;
  harvestStatus.count = harvestStatus.count || 0;
  harvestStatus.storeCollection = harvestStatus.storeCollection || null;

  if (message) {
    harvestStatus.message = message;
  }

  console.log(harvestStatus.message);
  log.information('harvest status', 'harvest', harvestStatus);
}


// ==================================================================
// Helpers
// ==================================================================

function printError(err) {
  console.log('error: ' + err.message);
}

function printErrorAndExit(err) {
  printError(err);
  printUsage();
  process.exit(1);
}

function printUsage() {
  console.log('usage: importsnap <mongodb-url> [loglevel]');
}

function printUsageAndExit() {
  printUsage();
  process.exit(1);
}


